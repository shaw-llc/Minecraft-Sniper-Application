name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
      # Continue with other builds even if one fails
      fail-fast: false
        
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
    
    - name: Fix Windows Permissions (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Adjusting Windows permissions..."
        # Handle potential permission issues with PowerShell
        if (Test-Path node_modules) {
          $acl = Get-Acl -Path node_modules
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","ContainerInherit,ObjectInherit","None","Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path node_modules -AclObject $acl
        }
      shell: pwsh
    
    - name: Install Windows Build Tools (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Installing Windows build tools..."
        npm config set msvs_version 2019
        npm config set python python2.7
      shell: cmd
    
    - name: Install Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path node_modules) {
          Remove-Item -Recurse -Force node_modules
        }
        npm ci
        npm install --save-dev electron@22.3.27 electron-builder@25.1.8
        npm install @babel/runtime@7.26.2 @mui/types@5.0.0 clsx@1.1.1 prop-types@15.7.2 react-is@17.0.2
        npm install @discordjs/rest@0.3.0 @discordjs/util@0.1.0 @sapphire/async-queue@1.0.0 discord-api-types@0.25.0 tslib@2.3.1 ws@7.4.6
      shell: pwsh
    
    - name: Install Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        if [ -d "node_modules" ]; then
          rm -rf node_modules
        fi
        npm ci
        npm install --save-dev electron@22.3.27 electron-builder@25.1.8
        npm install @babel/runtime@7.26.2 @mui/types@5.0.0 clsx@1.1.1 prop-types@15.7.2 react-is@17.0.2
        npm install @discordjs/rest@0.3.0 @discordjs/util@0.1.0 @sapphire/async-queue@1.0.0 discord-api-types@0.25.0 tslib@2.3.1 ws@7.4.6
      shell: bash
    
    - name: Create certificates directory (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (!(Test-Path -Path "certificates")) {
          New-Item -Path "certificates" -ItemType Directory
        } else {
          Write-Output "Certificates directory already exists"
        }
      shell: pwsh
    
    - name: Create certificates directory (non-Windows)
      if: matrix.os != 'windows-latest'
      run: mkdir -p certificates || echo "Certificates directory already exists"
      shell: bash
    
    - name: Create empty certificate files for build (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        New-Item -Path "certificates/entitlements.plist" -ItemType File -Force
        Set-Content -Path "certificates/entitlements.plist" -Value '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict></dict></plist>'
        New-Item -Path "certificates/notarize.js" -ItemType File -Force
        Set-Content -Path "certificates/notarize.js" -Value 'module.exports = async function (params) { console.log("Notarization skipped"); };'
      shell: pwsh
    
    - name: Create empty certificate files for build (non-Windows)
      if: matrix.os != 'windows-latest'
      run: |
        touch certificates/entitlements.plist
        echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict></dict></plist>' > certificates/entitlements.plist
        echo 'module.exports = async function (params) { console.log("Notarization skipped"); };' > certificates/notarize.js
      shell: bash
    
    - name: Set app-builder permissions (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        if (Test-Path node_modules/app-builder-bin/win/x64/app-builder.exe) {
          # Set execution permissions for app-builder.exe
          Write-Output "Setting permissions for app-builder.exe..."
          $acl = Get-Acl -Path node_modules/app-builder-bin/win/x64/app-builder.exe
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path node_modules/app-builder-bin/win/x64/app-builder.exe -AclObject $acl
        } else {
          Write-Output "app-builder.exe not found at expected path"
          # Search for app-builder.exe
          Get-ChildItem -Path node_modules -Filter app-builder.exe -Recurse | ForEach-Object {
            Write-Output "Found app-builder at: $($_.FullName)"
            $acl = Get-Acl -Path $_.FullName
            $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","Allow")
            $acl.SetAccessRule($accessRule)
            Set-Acl -Path $_.FullName -AclObject $acl
          }
        }
      shell: pwsh
    
    - name: Verify build environment (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Write-Output "Node.js version:"
        node -v
        Write-Output "NPM version:"
        npm -v
        Write-Output "Electron version:"
        npx electron -v
        Write-Output "Electron Builder version:"
        npx electron-builder -v
        Write-Output "Looking for app-builder.exe..."
        Get-ChildItem -Path node_modules -Include app-builder.exe -Recurse | ForEach-Object {
          Write-Output "Found: $($_.FullName)"
        }
      shell: pwsh
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo "Starting Windows build..."
        # Clean up problematic directories that might cause permission issues
        if (Test-Path "./node_modules/.cache") {
          Remove-Item -Recurse -Force "./node_modules/.cache"
        } else {
          Write-Output "Cache directory not found, continuing anyway"
        }
        # Add detailed debugging for Windows build
        $env:DEBUG = "electron-builder,electron-builder:*"
        # Check versions separately to avoid argument confusion
        Write-Output "Electron Builder version:"
        npx electron-builder --version
        # Build with specific flags for Windows compatibility
        Write-Output "Starting Windows build process..."
        npx electron-builder build --win --publish never
      shell: pwsh
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        echo "Starting macOS build..."
        # Ensure macOS build tools are properly set up
        export CSC_IDENTITY_AUTO_DISCOVERY=false
        # Build with specific flags for macOS compatibility
        npx electron-builder build --mac --publish never
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-windows-latest
        path: dist/windows
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-macos-latest
        path: dist/macos
    
    - name: Display artifacts structure
      run: ls -R dist/
    
    - name: Extract version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/windows/**/*.exe
          dist/macos/**/*.dmg
        draft: false
        prerelease: false
        name: OpenMC Username Sniper v${{ steps.get_version.outputs.version }}
        body: |
          ## OpenMC Username Sniper v${{ steps.get_version.outputs.version }}
          
          ### Changes in this release:
          - First official release of the OpenMC Username Sniper
          - Modern UI with dark and light themes
          - Cross-platform support (Windows, macOS)
          - Username checking, monitoring, and claiming functionality
          - Batch processing for multiple usernames
          - Smart scheduling for upcoming username drops
          - Notification system (desktop, Discord, email)
          
          ### Download for your platform:
          - Windows: OpenMC-Username-Sniper-Setup-Windows.exe
          - macOS: OpenMC-Username-Sniper-macOS.dmg
          
          See the [README](https://github.com/shaw-llc/Minecraft-Sniper-Application/blob/master/README-APP.md) for installation instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 