name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
      # Continue with other builds even if one fails
      fail-fast: false
        
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Fix Windows Permissions (Windows only)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Adjusting Windows permissions..."
        # Handle potential permission issues with PowerShell
        if (Test-Path node_modules) {
          $acl = Get-Acl -Path node_modules
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","ContainerInherit,ObjectInherit","None","Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path node_modules -AclObject $acl
        }
      shell: pwsh
    
    - name: Install Dependencies (non-Linux)
      run: npm ci
      
    - name: Create certificates directory
      run: mkdir -p certificates || echo "Certificates directory already exists"
      
    - name: Create empty certificate files for build
      run: |
        touch certificates/entitlements.plist
        echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict></dict></plist>' > certificates/entitlements.plist
        echo 'module.exports = async function (params) { console.log("Notarization skipped"); };' > certificates/notarize.js
    
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      run: |
        echo "Starting Windows build..."
        # Ensure Windows build tools are properly set up
        npm config set msvs_version 2019
        # Clean up problematic directories that might cause permission issues
        rm -rf ./node_modules/.cache || echo "Failed to remove cache directory, continuing anyway"
        # Build with specific flags for Windows compatibility
        npx electron-builder build --win --publish never || (echo "Windows build failed, retrying with debug info..." && DEBUG=electron-builder npx electron-builder build --win --publish never)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        echo "Starting macOS build..."
        # Ensure macOS build tools are properly set up
        export CSC_IDENTITY_AUTO_DISCOVERY=false
        # Build with specific flags for macOS compatibility
        npx electron-builder build --mac --publish never || (echo "macOS build failed, retrying with debug info..." && DEBUG=electron-builder npx electron-builder build --mac --publish never)
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.os }}
        path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-windows-latest
        path: dist/windows
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-macos-latest
        path: dist/macos
    
    - name: Display artifacts structure
      run: ls -R dist/
    
    - name: Extract version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/windows/**/*.exe
          dist/macos/**/*.dmg
        draft: false
        prerelease: false
        name: OpenMC Username Sniper v${{ steps.get_version.outputs.version }}
        body: |
          ## OpenMC Username Sniper v${{ steps.get_version.outputs.version }}
          
          ### Changes in this release:
          - First official release of the OpenMC Username Sniper
          - Modern UI with dark and light themes
          - Cross-platform support (Windows, macOS)
          - Username checking, monitoring, and claiming functionality
          - Batch processing for multiple usernames
          - Smart scheduling for upcoming username drops
          - Notification system (desktop, Discord, email)
          
          ### Download for your platform:
          - Windows: OpenMC-Username-Sniper-Setup-Windows.exe
          - macOS: OpenMC-Username-Sniper-macOS.dmg
          
          See the [README](https://github.com/shaw-llc/Minecraft-Sniper-Application/blob/master/README-APP.md) for installation instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 