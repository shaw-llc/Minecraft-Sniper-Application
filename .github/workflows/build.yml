name: Build Application

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
      # Continue with other builds even if one fails
      fail-fast: false
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
    
    - name: Fix Windows Permissions (Windows only)
      if: runner.os == 'Windows'
      run: |
        echo "Adjusting Windows permissions..."
        # Handle potential permission issues with PowerShell
        if (Test-Path node_modules) {
          $acl = Get-Acl -Path node_modules
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","ContainerInherit,ObjectInherit","None","Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path node_modules -AclObject $acl
        }
      shell: pwsh
    
    - name: Install Windows Build Tools (Windows only)
      if: runner.os == 'Windows'
      run: |
        echo "Installing Windows build tools..."
        npm config set msvs_version 2019
        npm config set python python2.7
      shell: cmd
    
    - name: Install Dependencies (non-Linux)
      run: |
        rm -rf node_modules
        npm ci
        npm install --save-dev electron@22.3.27 electron-builder@22.11.7
        npm install @babel/runtime@7.26.2 @mui/types@5.0.0 clsx@1.1.1 prop-types@15.7.2 react-is@17.0.2
        npm install @discordjs/rest@0.3.0 @discordjs/util@0.1.0 @sapphire/async-queue@1.0.0 discord-api-types@0.25.0 tslib@2.3.1 ws@7.4.6
      
    - name: Create certificates directory (Windows)
      if: runner.os == 'Windows'
      run: |
        if (!(Test-Path -Path "certificates")) {
          New-Item -Path "certificates" -ItemType Directory
        } else {
          Write-Output "Certificates directory already exists"
        }
      shell: pwsh
    
    - name: Create certificates directory (non-Windows)
      if: runner.os != 'Windows'
      run: mkdir -p certificates || echo "Certificates directory already exists"
      shell: bash
    
    - name: Create empty certificate files for build (Windows)
      if: runner.os == 'Windows'
      run: |
        New-Item -Path "certificates/entitlements.plist" -ItemType File -Force
        Set-Content -Path "certificates/entitlements.plist" -Value '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict></dict></plist>'
        New-Item -Path "certificates/notarize.js" -ItemType File -Force
        Set-Content -Path "certificates/notarize.js" -Value 'module.exports = async function (params) { console.log("Notarization skipped"); };'
      shell: pwsh
    
    - name: Create empty certificate files for build (non-Windows)
      if: runner.os != 'Windows'
      run: |
        touch certificates/entitlements.plist
        echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict></dict></plist>' > certificates/entitlements.plist
        echo 'module.exports = async function (params) { console.log("Notarization skipped"); };' > certificates/notarize.js
      shell: bash
    
    - name: Set app-builder permissions (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules/app-builder-bin/win/x64/app-builder.exe) {
          # Set execution permissions for app-builder.exe
          Write-Output "Setting permissions for app-builder.exe..."
          $acl = Get-Acl -Path node_modules/app-builder-bin/win/x64/app-builder.exe
          $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","Allow")
          $acl.SetAccessRule($accessRule)
          Set-Acl -Path node_modules/app-builder-bin/win/x64/app-builder.exe -AclObject $acl
        } else {
          Write-Output "app-builder.exe not found at expected path"
          # Search for app-builder.exe
          Get-ChildItem -Path node_modules -Filter app-builder.exe -Recurse | ForEach-Object {
            Write-Output "Found app-builder at: $($_.FullName)"
            $acl = Get-Acl -Path $_.FullName
            $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule("EVERYONE","FullControl","Allow")
            $acl.SetAccessRule($accessRule)
            Set-Acl -Path $_.FullName -AclObject $acl
          }
        }
      shell: pwsh
    
    - name: Verify build environment (Windows)
      if: runner.os == 'Windows'
      run: |
        Write-Output "Node.js version:"
        node -v
        Write-Output "NPM version:"
        npm -v
        Write-Output "Electron version:"
        npx electron -v
        Write-Output "Electron Builder version:"
        npx electron-builder -v
        Write-Output "Looking for app-builder.exe..."
        Get-ChildItem -Path node_modules -Include app-builder.exe -Recurse | ForEach-Object {
          Write-Output "Found: $($_.FullName)"
        }
      shell: pwsh
    
    - name: Build for current platform
      run: |
        echo "Starting build for $RUNNER_OS..."
        if [ "$RUNNER_OS" == "Windows" ]; then
          # Clean up problematic directories that might cause permission issues
          rm -rf ./node_modules/.cache || echo "Failed to remove cache directory, continuing anyway"
          # Add detailed debugging for Windows build
          echo "Setting DEBUG environment variables..."
          export DEBUG=electron-builder,electron-builder:*
          # Build with specific flags for Windows compatibility
          npx electron-builder --version
          npx electron-builder build --win --publish never || (
            echo "Windows build failed. Trying again with more debug info..."
            set -x  # Enable verbose mode
            export DEBUG=electron-builder,electron-builder:*,electron-builder-lib:*
            npx electron-builder build --win --publish never
          )
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # Ensure macOS build tools are properly set up
          export CSC_IDENTITY_AUTO_DISCOVERY=false
          # Build with specific flags for macOS compatibility
          npx electron-builder build --mac --publish never || (echo "macOS build failed, retrying with debug info..." && DEBUG=electron-builder npx electron-builder build --mac --publish never)
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}
        path: dist/ 